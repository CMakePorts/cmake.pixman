#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <math.h>
#include <string.h>

#include "pixman-private.h"

#include "pixman-combine.h"

#define Red(x) (((x) >> R_SHIFT) & MASK)
#define Green(x) (((x) >> G_SHIFT) & MASK)
#define Blue(x) ((x) & MASK)

/*
 * There are two ways of handling alpha -- either as a single unified value or
 * a separate value for each component, hence each macro must have two
 * versions.  The unified alpha version has a 'U' at the end of the name,
 * the component version has a 'C'.  Similarly, functions which deal with
 * this difference will have two versions using the same convention.
 */

/*
 * All of the composing functions
 */

static force_inline comp4_t
combineMask (const comp4_t *src, const comp4_t *mask, int i)
{
    comp4_t s, m;

    if (mask)
    {
	m = *(mask + i) >> A_SHIFT;

	if (!m)
	    return 0;
    }

    s = *(src + i);

    if (mask)
	FbByteMul (s, m);

    return s;
}

static void
fbCombineClear (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    memset(dest, 0, width*sizeof(comp4_t));
}

static void
fbCombineSrcU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    if (!mask)
	memcpy (dest, src, width * sizeof (comp4_t));
    else
    {
	for (i = 0; i < width; ++i)
	{
	    comp4_t s = combineMask (src, mask, i);
	    
	    *(dest + i) = s;
	}
    }
}

/* if the Src is opaque, call fbCombineSrcU */
static void
fbCombineOverU (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t ia = Alpha(~s);

        FbByteMulAdd(d, ia, s);
	*(dest + i) = d;
    }
}

/* if the Dst is opaque, this is a noop */
static void
fbCombineOverReverseU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t ia = Alpha(~*(dest + i));
        FbByteMulAdd(s, ia, d);
	*(dest + i) = s;
    }
}

/* if the Dst is opaque, call fbCombineSrcU */
static void
fbCombineInU (pixman_implementation_t *imp, pixman_op_t op,
	      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t a = Alpha(*(dest + i));
        FbByteMul(s, a);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, this is a noop */
static void
fbCombineInReverseU (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
	comp4_t s = combineMask (src, mask, i);
	comp4_t d = *(dest + i);
        comp4_t a = Alpha(s);
        FbByteMul(d, a);
	*(dest + i) = d;
    }
}

/* if the Dst is opaque, call fbCombineClear */
static void
fbCombineOutU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t a = Alpha(~*(dest + i));
        FbByteMul(s, a);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, call fbCombineClear */
static void
fbCombineOutReverseU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
	comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t a = Alpha(~s);
        FbByteMul(d, a);
	*(dest + i) = d;
    }
}

/* if the Src is opaque, call fbCombineInU */
/* if the Dst is opaque, call fbCombineOverU */
/* if both the Src and Dst are opaque, call fbCombineSrcU */
static void
fbCombineAtopU (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t dest_a = Alpha(d);
        comp4_t src_ia = Alpha(~s);

        FbByteAddMul(s, dest_a, d, src_ia);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, call fbCombineOverReverseU */
/* if the Dst is opaque, call fbCombineInReverseU */
/* if both the Src and Dst are opaque, call fbCombineDstU */
static void
fbCombineAtopReverseU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t src_a = Alpha(s);
        comp4_t dest_ia = Alpha(~d);

        FbByteAddMul(s, dest_ia, d, src_a);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, call fbCombineOverU */
/* if the Dst is opaque, call fbCombineOverReverseU */
/* if both the Src and Dst are opaque, call fbCombineClear */
static void
fbCombineXorU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t src_ia = Alpha(~s);
        comp4_t dest_ia = Alpha(~d);

        FbByteAddMul(s, dest_ia, d, src_ia);
	*(dest + i) = s;
    }
}

static void
fbCombineAddU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        FbByteAdd(d, s);
	*(dest + i) = d;
    }
}

/* if the Src is opaque, call fbCombineAddU */
/* if the Dst is opaque, call fbCombineAddU */
/* if both the Src and Dst are opaque, call fbCombineAddU */
static void
fbCombineSaturateU (pixman_implementation_t *imp, pixman_op_t op,
		    comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp2_t sa, da;

        sa = s >> A_SHIFT;
        da = ~d >> A_SHIFT;
        if (sa > da)
        {
            sa = IntDiv(da, sa);
            FbByteMul(s, sa);
        };
        FbByteAdd(d, s);
	*(dest + i) = d;
    }
}


/* Multiply
 *
 * Dca' = Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)
 * Da'  = Sa.Da + Sa.(1 - Da) + Da.(1 - Sa)
 *      = Sa + Da - Sa.Da 
 */

static void
fbCombineMultiplyU (pixman_implementation_t *imp, pixman_op_t op,
		    comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
	comp4_t ss = s;
        comp4_t src_ia = Alpha (~s);
	comp4_t dest_ia = Alpha (~d);

	FbByteAddMul (ss, dest_ia, d, src_ia);
	FbByteMulC (d, s);
	FbByteAdd (d, ss); 	
	*(dest + i) = d;
    }
}

/* Screen
 *
 * Dca' = (Sca.Da + Dca.Sa - Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa)
 *      = Sca + Dca - Sca.Dca
 * Da'  = Sa + Da - Sa.Da 
 */

static void
fbCombineScreenU (pixman_implementation_t *imp, pixman_op_t op,
		  comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
	comp4_t p = s;
	comp4_t a, r, g, b;

	FbByteMulC (p, d);

	a = Alpha (s)	+ Alpha (d) - Alpha (p);
	r = Red(s)	+ Red (d)   - Red (p);
	g = Green (s)	+ Green (d) - Green (p);
	b = Blue (s)	+ Blue (d)  - Blue (p);

	/* no clamping required, values don't overflow */
	*(dest + i) = (a << A_SHIFT) | (r << R_SHIFT) | (g << G_SHIFT) | b;
    }
}

#define FbBlendLoop				    \
    int i;					    \
    for (i = 0; i < width; i++)	{		    \
        comp4_t s = combineMask (src, mask, i);     \
	comp4_t d = *(dest + i);		    \
	comp4_t a, r, g, b;			    \
	comp4_t sada, sca, dca, sa, da, isa, ida;   \
						    \
	da = Alpha (d);				    \
	sa = Alpha (s);				    \
	ida = Alpha (~d);			    \
	isa = Alpha (~s);			    \
	sada = sa * da;				    \
						    \
	a = sa + da - DivOne (sada);		    \
						    \
	sca = Red (s);				    \
	dca = Red (d);				    \
	FbBlendOp (r);				    \
						    \
	sca = Green (s);			    \
	dca = Green (d);			    \
	FbBlendOp (g);				    \
						    \
	sca = Blue (s);				    \
	dca = Blue (d);				    \
	FbBlendOp (b);				    \
						    \
	*(dest + i) = (a << A_SHIFT)		    \
	    | ((r & MASK) << R_SHIFT)               \
	    | ((g & MASK) << G_SHIFT)		    \
	    |  (b & MASK);			    \
    } while (0);

/* Overlay
 *
 * if 2.Dca < Da
 *     Dca' = 2.Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)
 *   otherwise
 *     Dca' = Sa.Da - 2.(Da - Dca).(Sa - Sca) + Sca.(1 - Da) + Dca.(1 - Sa)
 * Da' = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)							\
    do {								\
	if (2 * dca  < da)						\
	    rca = 2 * sca * dca;					\
	else								\
	    rca = sada - 2 * (da - dca) * (sa - sca);			\
	rca += sca * ida + dca * isa;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineOverlayU (pixman_implementation_t *imp, pixman_op_t op,
		   comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Darken
 *
 * Dca' = min(Sca.Da, Dca.Sa) + Sca.(1 - Da) + Dca.(1 - Sa)
 * Da'  = Sa + Da - Sa.Da 
 */

#define FbBlendOp(rca)							\
    do {								\
	rca = sca * da;							\
	if (rca > dca * sa)						\
	    rca = dca * sa;						\
	rca += sca * ida + dca * isa;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineDarkenU (pixman_implementation_t *imp, pixman_op_t op,
		  comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Lighten
 *
 * Dca' = max(Sca.Da, Dca.Sa) + Sca.(1 - Da) + Dca.(1 - Sa)
 * Da'  = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)							\
    do {								\
	rca = sca * da;							\
	if (rca < dca * sa)						\
	    rca = dca * sa;						\
	rca += sca * ida + dca * isa;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineLightenU (pixman_implementation_t *imp, pixman_op_t op,
		   comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Color dodge
 *
 * if Sca.Da + Dca.Sa >= Sa.Da
 *   Dca' = Sa.Da + Sca.(1 - Da) + Dca.(1 - Sa)
 * otherwise
 *   Dca' = Dca.Sa/(1-Sca/Sa) + Sca.(1 - Da) + Dca.(1 - Sa)
 *
 * Da'  = Sa + Da - Sa.Da
 */ 

#define FbBlendOp(rca)							\
    do {								\
	if ((sca * da + dca * sa >= sada) || (sa == sca))		\
	    rca = sada; 						\
	else 								\
	    rca = sa * sa * dca / (sa - sca);				\
	rca += sca * ida + dca * isa;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineColorDodgeU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Color burn
 *
 * if Sca.Da + Dca.Sa <= Sa.Da
 *   Dca' = Sca.(1 - Da) + Dca.(1 - Sa)
 * otherwise
 *   Dca' = Sa.(Sca.Da + Dca.Sa - Sa.Da)/Sca + Sca.(1 - Da) + Dca.(1 - Sa)
 *
 * Da'  = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)							\
    do {								\
	if ((sca * da + dca * sa <= sada) || (sca == 0))		\
	    rca = sca * ida + dca * isa;				\
	else 								\
	    rca = sa * (sca * da + sa * dca - sada) / sca		\
		   + sca * ida						\
		   + dca * isa ;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineColorBurnU (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Hard light
 *
 * if 2.Sca < Sa
 *   Dca' = 2.Sca.Dca + Sca.(1 - Da) + Dca.(1 - Sa)
 * otherwise
 *   Dca' = Sa.Da - 2.(Da - Dca).(Sa - Sca) + Sca.(1 - Da) + Dca.(1 - Sa)
 *
 * Da'  = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)							\
    do {								\
	if (2 * sca < sa)						\
	    rca = 2 * sca * dca;					\
	else 								\
	    rca = sada - 2 * (da - dca) * (sa - sca);			\
	rca += sca * ida + dca * isa;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineHardLightU (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Soft light
 *
 * original definition (taken from PDF spec):
 * 
 * if (Sc <= 0.5)
 *   Dc' = Dc - ( 1 - 2 . Sc ) . Dc . ( 1 - Dc )
 * else
 *   Dc' = Dc + ( 2 . Sc - 1 ) . ( F(Dc) – Dc )
 *
 * with
 * if (x < 0.25)
 *   F(x) = ( ( 16 . x - 12 ) . x + 4 ) . x
 * else
 *   F(x) = SQRT (x)
 *
 * ==> (taken from SVG spec)
 *
 * if (2.Sca <= Sa)
 *   Dca' = Dca.(Sa - (1 - Dca/Da).(2.Sca - Sa)) + Sca.(1 - Da) + Dca.(1 - Sa) 
 * otherwise if Dca.8 <= Da
 *   Dca' = Dca.(Sa - (1 - Dca/Da).(2.Sca - Sa).(3 - 8.Dca/Da)) + Sc.(1 - Da) + Dca.(1 - Sa)
 * otherwise
 *   Dca' = (Dca.Sa + (SQRT (Dca/Da).Da - Dca).(2.Sca - Sa)) + Sca.(1 - Da) + Dca.(1 - Sa)
 *   
 * ==> (used here)
 * if (2.Sca <= Sa)
 *   Dca' = Dca.(Sa - (1 - Dca/Da).(2.Sca - Sa))
 * otherwise if Dca.8 <= Da
 *   Dca' = Dca.(Sa - (1 - Dca/Da).(2.Sca - Sa).(3 - 8.Dca/Da))
 * otherwise
 *   Dca' = (Dca.Sa + (SQRT (Dca/Da).Da - Dca).(2.Sca - Sa))
 * Dca' += Sca.(1 - Da) + Dca.(1 - Sa);
 *
 * Da'  = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)									\
    do {										\
	if (2 * sca < sa) { 								\
	    if (dca == da || da == 0)							\
	    	rca = dca * sa;								\
	    else 									\
		rca = dca * (sa - (da - dca) * (2 * sca + sa) / da);			\
	} else if (da == 0) {								\
	    rca = 0;									\
	} else if (8 * dca <= da) { 			      				\
	    int tmp = dca * (sa - (da - dca) * (2 * sca - sa) / da * (3 * da - 8 * dca) / da);	\
	    rca = tmp < 0 ? -tmp : tmp;	  						\
        } else {									\
	    rca = dca * sa + ((comp4_t) (sqrt (dca * da) - dca)) * (2 * sca - sa);    	\
	}										\
	rca += sca * ida + dca * isa;							\
	rca = DivOne (rca);		   						\
    } while (0);

static void
fbCombineSoftLightU (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Difference
 *
 * Dca' = abs(Dca.Sa - Sca.Da) + Sca.(1 - Da) + Dca.(1 - Sa)
 *	= Sca + Dca - 2.min(Sca.Da, Dca.Sa)
 *
 * Da'  = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)							\
    do {								\
	comp4_t dcasa = dca * sa;					\
	rca = sca * da;							\
	if (rca < dcasa)						\
	    rca = dcasa - rca;						\
	else 								\
	    rca -= dcasa;						\
	rca += sca * ida + dca * isa;					\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineDifferenceU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

/* Exclusion
 *
 * Dca' = (Sca.Da + Dca.Sa - 2.Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa)
 *
 * Da'  = Sa + Da - Sa.Da
 */

#define FbBlendOp(rca)							\
    do {								\
	rca = dca * MASK + sca * (MASK - 2 * dca); 		   	\
	rca = DivOne (rca);						\
    } while (0);

static void
fbCombineExclusionU (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    FbBlendLoop
}

#undef FbBlendOp

#undef FbBlendLoop

static FASTCALL void
fbCombineSubtractU (pixman_implementation_t *imp, pixman_op_t op,
		    comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

#define Subtract(res, Color)						\
    do {								\
      comp1_t dc, sc;							\
      dc = Color (d);							\
      sc = Color (s);							\
      if (sc >= dc)							\
	res = 0;							\
      else								\
	res = dc - sc;							\
    } while (0);

    for (i = 0; i < width; ++i) {
	comp4_t d, s;
	comp4_t r, g, b;

	d = *(dest + i);
	s = combineMask (src, mask, i);

	Subtract (r, Red);
	Subtract (g, Green);
	Subtract (b, Blue);

	*(dest + i) = (Alpha (d) << A_SHIFT)
	    | (r << R_SHIFT)
	    | (g << G_SHIFT)
	    | b;
    }

#undef Subtract
}

static FASTCALL void
fbCombineInvertU (pixman_implementation_t *imp, pixman_op_t op,
		  comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
      comp4_t inv, d, s;
      comp1_t a, ia;

      d = *(dest + i);
      s = combineMask (src, mask, i);
      a = Alpha (s);
      inv = ~d | A_MASK;
      ia = ~a;

      FbByteAddMul (inv, a, d, ia);
      *(dest + i) = inv;
    }
}

/*
 * All of the disjoint composing functions

 The four entries in the first column indicate what source contributions
 come from each of the four areas of the picture -- areas covered by neither
 A nor B, areas covered only by A, areas covered only by B and finally
 areas covered by both A and B.

 Disjoint			Conjoint
 Fa		Fb		Fa		Fb
 (0,0,0,0)	0		0		0		0
 (0,A,0,A)	1		0		1		0
 (0,0,B,B)	0		1		0		1
 (0,A,B,A)	1		min((1-a)/b,1)	1		max(1-a/b,0)
 (0,A,B,B)	min((1-b)/a,1)	1		max(1-b/a,0)	1
 (0,0,0,A)	max(1-(1-b)/a,0) 0		min(1,b/a)	0
 (0,0,0,B)	0		max(1-(1-a)/b,0) 0		min(a/b,1)
 (0,A,0,0)	min(1,(1-b)/a)	0		max(1-b/a,0)	0
 (0,0,B,0)	0		min(1,(1-a)/b)	0		max(1-a/b,0)
 (0,0,B,A)	max(1-(1-b)/a,0) min(1,(1-a)/b)	 min(1,b/a)	max(1-a/b,0)
 (0,A,0,B)	min(1,(1-b)/a)	max(1-(1-a)/b,0) max(1-b/a,0)	min(1,a/b)
 (0,A,B,0)	min(1,(1-b)/a)	min(1,(1-a)/b)	max(1-b/a,0)	max(1-a/b,0)

*/

#define CombineAOut 1
#define CombineAIn  2
#define CombineBOut 4
#define CombineBIn  8

#define CombineClear	0
#define CombineA	(CombineAOut|CombineAIn)
#define CombineB	(CombineBOut|CombineBIn)
#define CombineAOver	(CombineAOut|CombineBOut|CombineAIn)
#define CombineBOver	(CombineAOut|CombineBOut|CombineBIn)
#define CombineAAtop	(CombineBOut|CombineAIn)
#define CombineBAtop	(CombineAOut|CombineBIn)
#define CombineXor	(CombineAOut|CombineBOut)

/* portion covered by a but not b */
static comp1_t
fbCombineDisjointOutPart (comp1_t a, comp1_t b)
{
    /* min (1, (1-b) / a) */

    b = ~b;		    /* 1 - b */
    if (b >= a)		    /* 1 - b >= a -> (1-b)/a >= 1 */
	return MASK;	    /* 1 */
    return IntDiv(b,a);     /* (1-b) / a */
}

/* portion covered by both a and b */
static comp1_t
fbCombineDisjointInPart (comp1_t a, comp1_t b)
{
    /* max (1-(1-b)/a,0) */
    /*  = - min ((1-b)/a - 1, 0) */
    /*  = 1 - min (1, (1-b)/a) */

    b = ~b;		    /* 1 - b */
    if (b >= a)		    /* 1 - b >= a -> (1-b)/a >= 1 */
	return 0;	    /* 1 - 1 */
    return ~IntDiv(b,a);    /* 1 - (1-b) / a */
}

/* portion covered by a but not b */
static comp1_t
fbCombineConjointOutPart (comp1_t a, comp1_t b)
{
    /* max (1-b/a,0) */
    /* = 1-min(b/a,1) */

    /* min (1, (1-b) / a) */

    if (b >= a)		    /* b >= a -> b/a >= 1 */
	return 0x00;	    /* 0 */
    return ~IntDiv(b,a);    /* 1 - b/a */
}

/* portion covered by both a and b */
static comp1_t
fbCombineConjointInPart (comp1_t a, comp1_t b)
{
    /* min (1,b/a) */

    if (b >= a)		    /* b >= a -> b/a >= 1 */
	return MASK;	    /* 1 */
    return IntDiv(b,a);     /* b/a */
}

#define FbGen(x,y,i,ax,ay,t,u,v) ((t) = (IntMult(GetComp(y,i),ay,(u)) + \
					 IntMult(GetComp(x,i),ax,(v))), \
				  	 (comp4_t) ((comp1_t) ((t) |		\
					 (0 - ((t) >> G_SHIFT)))) << (i))

static void
fbCombineDisjointGeneralU (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t m,n,o,p;
        comp2_t Fa, Fb, t, u, v;
        comp1_t sa = s >> A_SHIFT;
        comp1_t da = d >> A_SHIFT;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            Fa = fbCombineDisjointOutPart (sa, da);
            break;
        case CombineAIn:
            Fa = fbCombineDisjointInPart (sa, da);
            break;
        case CombineA:
            Fa = MASK;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            Fb = fbCombineDisjointOutPart (da, sa);
            break;
        case CombineBIn:
            Fb = fbCombineDisjointInPart (da, sa);
            break;
        case CombineB:
            Fb = MASK;
            break;
        }
        m = FbGen (s,d,0,Fa,Fb,t, u, v);
        n = FbGen (s,d,G_SHIFT,Fa,Fb,t, u, v);
        o = FbGen (s,d,R_SHIFT,Fa,Fb,t, u, v);
        p = FbGen (s,d,A_SHIFT,Fa,Fb,t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

static void
fbCombineDisjointOverU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp2_t a = s >> A_SHIFT;

        if (a != 0x00)
        {
            if (a != MASK)
            {
                comp4_t d = *(dest + i);
                a = fbCombineDisjointOutPart (d >> A_SHIFT, a);
                FbByteMulAdd(d, a, s);
                s = d;
            }
	    *(dest + i) = s;
        }
    }
}

static void
fbCombineDisjointInU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineAIn);
}

static void
fbCombineDisjointInReverseU (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineBIn);
}

static void
fbCombineDisjointOutU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineAOut);
}

static void
fbCombineDisjointOutReverseU (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineBOut);
}

static void
fbCombineDisjointAtopU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineAAtop);
}

static void
fbCombineDisjointAtopReverseU (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineBAtop);
}

static void
fbCombineDisjointXorU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineXor);
}

static void
fbCombineConjointGeneralU (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t m,n,o,p;
        comp2_t Fa, Fb, t, u, v;
        comp1_t sa = s >> A_SHIFT;
        comp1_t da = d >> A_SHIFT;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            Fa = fbCombineConjointOutPart (sa, da);
            break;
        case CombineAIn:
            Fa = fbCombineConjointInPart (sa, da);
            break;
        case CombineA:
            Fa = MASK;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            Fb = fbCombineConjointOutPart (da, sa);
            break;
        case CombineBIn:
            Fb = fbCombineConjointInPart (da, sa);
            break;
        case CombineB:
            Fb = MASK;
            break;
        }
        m = FbGen (s,d,0,Fa,Fb,t, u, v);
        n = FbGen (s,d,G_SHIFT,Fa,Fb,t, u, v);
        o = FbGen (s,d,R_SHIFT,Fa,Fb,t, u, v);
        p = FbGen (s,d,A_SHIFT,Fa,Fb,t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

static void
fbCombineConjointOverU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAOver);
}


static void
fbCombineConjointOverReverseU (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBOver);
}


static void
fbCombineConjointInU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAIn);
}


static void
fbCombineConjointInReverseU (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBIn);
}

static void
fbCombineConjointOutU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAOut);
}

static void
fbCombineConjointOutReverseU (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBOut);
}

static void
fbCombineConjointAtopU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAAtop);
}

static void
fbCombineConjointAtopReverseU (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBAtop);
}

static void
fbCombineConjointXorU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineXor);
}

/********************************************************************************/
/*************************** Per Channel functions ******************************/
/********************************************************************************/

static void
fbCombineMaskC (comp4_t *src, comp4_t *mask)
{
    comp4_t a = *mask;

    comp4_t	x;
    comp2_t	xa;

    if (!a)
    {
	*(src) = 0;
	return;
    }

    x = *(src);
    if (a == ~0)
    {
	x = x >> A_SHIFT;
	x |= x << G_SHIFT;
	x |= x << R_SHIFT;
	*(mask) = x;
	return;
    }

    xa = x >> A_SHIFT;
    FbByteMulC(x, a);
    *(src) = x;
    FbByteMul(a, xa);
    *(mask) = a;
}

static void
fbCombineMaskValueC (comp4_t *src, const comp4_t *mask)
{
    comp4_t a = *mask;
    comp4_t	x;

    if (!a)
    {
	*(src) = 0;
	return;
    }

    if (a == ~0)
	return;

    x = *(src);
    FbByteMulC(x, a);
    *(src) =x;
}

static void
fbCombineMaskAlphaC (const comp4_t *src, comp4_t *mask)
{
    comp4_t a = *(mask);
    comp4_t	x;

    if (!a)
	return;

    x = *(src) >> A_SHIFT;
    if (x == MASK)
	return;
    if (a == ~0)
    {
	x = x >> A_SHIFT;
	x |= x << G_SHIFT;
	x |= x << R_SHIFT;
	*(mask) = x;
	return;
    }

    FbByteMul(a, x);
    *(mask) = a;
}

static void
fbCombineClearC (pixman_implementation_t *imp, pixman_op_t op,
		 comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    memset(dest, 0, width*sizeof(comp4_t));
}

static void
fbCombineSrcC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
	comp4_t s = *(src + i);
	comp4_t m = *(mask + i);

	fbCombineMaskValueC (&s, &m);

	*(dest) = s;
    }
}

static void
fbCombineOverC (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
	comp4_t s = *(src + i);
	comp4_t m = *(mask + i);
	comp4_t a;

	fbCombineMaskC (&s, &m);

	a = ~m;
        if (a != ~0)
        {
            if (a)
            {
                comp4_t d = *(dest + i);
                FbByteMulAddC(d, a, s);
                s = d;
            }
	    *(dest + i) = s;
        }
    }
}

static void
fbCombineOverReverseC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp4_t a = ~d >> A_SHIFT;

        if (a)
        {
            comp4_t s = *(src + i);
	    comp4_t m = *(mask + i);

	    fbCombineMaskValueC (&s, &m);

            if (a != MASK)
            {
                FbByteMulAdd(s, a, d);
            }
	    *(dest + i) = s;
        }
    }
}

static void
fbCombineInC (pixman_implementation_t *imp, pixman_op_t op,
	      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp2_t a = d >> A_SHIFT;
        comp4_t s = 0;
        if (a)
        {
	    comp4_t m = *(mask + i);

	    s = *(src + i);
	    fbCombineMaskValueC (&s, &m);
            if (a != MASK)
            {
                FbByteMul(s, a);
            }
        }
	*(dest + i) = s;
    }
}

static void
fbCombineInReverseC (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t a;

	fbCombineMaskAlphaC (&s, &m);

	a = m;
        if (a != ~0)
        {
            comp4_t d = 0;
            if (a)
            {
                d = *(dest + i);
                FbByteMulC(d, a);
            }
	    *(dest + i) = d;
        }
    }
}

static void
fbCombineOutC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp2_t a = ~d >> A_SHIFT;
        comp4_t s = 0;
        if (a)
        {
	    comp4_t m = *(mask + i);

	    s = *(src + i);
	    fbCombineMaskValueC (&s, &m);

            if (a != MASK)
            {
                FbByteMul(s, a);
            }
        }
	*(dest + i) = s;
    }
}

static void
fbCombineOutReverseC (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
	comp4_t s = *(src + i);
	comp4_t m = *(mask + i);
	comp4_t a;

	fbCombineMaskAlphaC (&s, &m);

        a = ~m;
        if (a != ~0)
        {
            comp4_t d = 0;
            if (a)
            {
                d = *(dest + i);
                FbByteMulC(d, a);
            }
	    *(dest + i) = d;
        }
    }
}

static void
fbCombineAtopC (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t ad;
        comp2_t as = d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

        ad = ~m;

        FbByteAddMulC(d, ad, s, as);
	*(dest + i) = d;
    }
}

static void
fbCombineAtopReverseC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {

        comp4_t d = *(dest + i);
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t ad;
        comp2_t as = ~d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

	ad = m;

        FbByteAddMulC(d, ad, s, as);
	*(dest + i) = d;
    }
}

static void
fbCombineXorC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t ad;
        comp2_t as = ~d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

	ad = ~m;

        FbByteAddMulC(d, ad, s, as);
	*(dest + i) = d;
    }
}

static void
fbCombineAddC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t d = *(dest + i);

	fbCombineMaskValueC (&s, &m);

        FbByteAdd(d, s);
	*(dest + i) = d;
    }
}

static void
fbCombineSaturateC (pixman_implementation_t *imp, pixman_op_t op,
		    comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s, d;
        comp2_t sa, sr, sg, sb, da;
        comp2_t t, u, v;
        comp4_t m,n,o,p;

        d = *(dest + i);
        s = *(src + i);
	m = *(mask + i);

	fbCombineMaskC (&s, &m);

        sa = (m >> A_SHIFT);
        sr = (m >> R_SHIFT) & MASK;
        sg = (m >> G_SHIFT) & MASK;
        sb =  m             & MASK;
        da = ~d >> A_SHIFT;

        if (sb <= da)
            m = Add(s,d,0,t);
        else
            m = FbGen (s, d, 0, (da << G_SHIFT) / sb, MASK, t, u, v);

        if (sg <= da)
            n = Add(s,d,G_SHIFT,t);
        else
            n = FbGen (s, d, G_SHIFT, (da << G_SHIFT) / sg, MASK, t, u, v);

        if (sr <= da)
            o = Add(s,d,R_SHIFT,t);
        else
            o = FbGen (s, d, R_SHIFT, (da << G_SHIFT) / sr, MASK, t, u, v);

        if (sa <= da)
            p = Add(s,d,A_SHIFT,t);
        else
            p = FbGen (s, d, A_SHIFT, (da << G_SHIFT) / sa, MASK, t, u, v);

	*(dest + i) = m|n|o|p;
    }
}

static void
fbCombineDisjointGeneralC (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s, d;
        comp4_t m,n,o,p;
        comp4_t Fa, Fb;
        comp2_t t, u, v;
        comp4_t sa;
        comp1_t da;

        s = *(src + i);
        m = *(mask + i);
        d = *(dest + i);
        da = d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

	sa = m;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            m = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineAIn:
            m = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineA:
            Fa = ~0;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            m = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineBIn:
            m = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineB:
            Fb = ~0;
            break;
        }
        m = FbGen (s,d,0,GetComp(Fa,0),GetComp(Fb,0),t, u, v);
        n = FbGen (s,d,G_SHIFT,GetComp(Fa,G_SHIFT),GetComp(Fb,G_SHIFT),t, u, v);
        o = FbGen (s,d,R_SHIFT,GetComp(Fa,R_SHIFT),GetComp(Fb,R_SHIFT),t, u, v);
        p = FbGen (s,d,A_SHIFT,GetComp(Fa,A_SHIFT),GetComp(Fb,A_SHIFT),t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

static void
fbCombineDisjointOverC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAOver);
}

static void
fbCombineDisjointInC (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAIn);
}

static void
fbCombineDisjointInReverseC (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineBIn);
}

static void
fbCombineDisjointOutC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAOut);
}

static void
fbCombineDisjointOutReverseC (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineBOut);
}

static void
fbCombineDisjointAtopC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAAtop);
}

static void
fbCombineDisjointAtopReverseC (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineBAtop);
}

static void
fbCombineDisjointXorC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineXor);
}

static void
fbCombineConjointGeneralC (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s, d;
        comp4_t m,n,o,p;
        comp4_t Fa, Fb;
        comp2_t t, u, v;
        comp4_t sa;
        comp1_t da;

        s = *(src + i);
        m = *(mask + i);
        d = *(dest + i);
        da = d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

        sa = m;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            m = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineAIn:
            m = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineA:
            Fa = ~0;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            m = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineBIn:
            m = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineB:
            Fb = ~0;
            break;
        }
        m = FbGen (s,d,0,GetComp(Fa,0),GetComp(Fb,0),t, u, v);
        n = FbGen (s,d,G_SHIFT,GetComp(Fa,G_SHIFT),GetComp(Fb,G_SHIFT),t, u, v);
        o = FbGen (s,d,R_SHIFT,GetComp(Fa,R_SHIFT),GetComp(Fb,R_SHIFT),t, u, v);
        p = FbGen (s,d,A_SHIFT,GetComp(Fa,A_SHIFT),GetComp(Fb,A_SHIFT),t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

static void
fbCombineConjointOverC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAOver);
}

static void
fbCombineConjointOverReverseC (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBOver);
}

static void
fbCombineConjointInC (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAIn);
}

static void
fbCombineConjointInReverseC (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBIn);
}

static void
fbCombineConjointOutC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAOut);
}

static void
fbCombineConjointOutReverseC (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBOut);
}

static void
fbCombineConjointAtopC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAAtop);
}

static void
fbCombineConjointAtopReverseC (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBAtop);
}

static void
fbCombineConjointXorC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineXor);
}

void
_pixman_setup_combiner_functions_width (pixman_implementation_t *imp)
{
    /* Unified alpha */
    imp->combine_width[PIXMAN_OP_CLEAR] = fbCombineClear;
    imp->combine_width[PIXMAN_OP_SRC] = fbCombineSrcU;
    /* dest */
    imp->combine_width[PIXMAN_OP_OVER] = fbCombineOverU;
    imp->combine_width[PIXMAN_OP_OVER_REVERSE] = fbCombineOverReverseU;
    imp->combine_width[PIXMAN_OP_IN] = fbCombineInU;
    imp->combine_width[PIXMAN_OP_IN_REVERSE] = fbCombineInReverseU;
    imp->combine_width[PIXMAN_OP_OUT] = fbCombineOutU;
    imp->combine_width[PIXMAN_OP_OUT_REVERSE] = fbCombineOutReverseU;
    imp->combine_width[PIXMAN_OP_ATOP] = fbCombineAtopU;
    imp->combine_width[PIXMAN_OP_ATOP_REVERSE] = fbCombineAtopReverseU;
    imp->combine_width[PIXMAN_OP_XOR] = fbCombineXorU;
    imp->combine_width[PIXMAN_OP_ADD] = fbCombineAddU;
    imp->combine_width[PIXMAN_OP_SATURATE] = fbCombineSaturateU;

    /* Disjoint, unified */
    imp->combine_width[PIXMAN_OP_DISJOINT_CLEAR] = fbCombineClear;
    imp->combine_width[PIXMAN_OP_DISJOINT_SRC] = fbCombineSrcU;
    /* dest */
    imp->combine_width[PIXMAN_OP_DISJOINT_OVER] = fbCombineDisjointOverU;
    imp->combine_width[PIXMAN_OP_DISJOINT_OVER_REVERSE] = fbCombineSaturateU;
    imp->combine_width[PIXMAN_OP_DISJOINT_IN] = fbCombineDisjointInU;
    imp->combine_width[PIXMAN_OP_DISJOINT_IN_REVERSE] = fbCombineDisjointInReverseU;
    imp->combine_width[PIXMAN_OP_DISJOINT_OUT] = fbCombineDisjointOutU;
    imp->combine_width[PIXMAN_OP_DISJOINT_OUT_REVERSE] = fbCombineDisjointOutReverseU;
    imp->combine_width[PIXMAN_OP_DISJOINT_ATOP] = fbCombineDisjointAtopU;
    imp->combine_width[PIXMAN_OP_DISJOINT_ATOP_REVERSE] = fbCombineDisjointAtopReverseU;
    imp->combine_width[PIXMAN_OP_DISJOINT_XOR] = fbCombineDisjointXorU;

    /* Conjoint, unified */
    imp->combine_width[PIXMAN_OP_CONJOINT_CLEAR] = fbCombineClear;
    imp->combine_width[PIXMAN_OP_CONJOINT_SRC] = fbCombineSrcU;
    /* dest */
    imp->combine_width[PIXMAN_OP_CONJOINT_OVER] = fbCombineConjointOverU;
    imp->combine_width[PIXMAN_OP_CONJOINT_OVER_REVERSE] = fbCombineConjointOverReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_IN] = fbCombineConjointInU;
    imp->combine_width[PIXMAN_OP_CONJOINT_IN_REVERSE] = fbCombineConjointInReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_OUT] = fbCombineConjointOutU;
    imp->combine_width[PIXMAN_OP_CONJOINT_OUT_REVERSE] = fbCombineConjointOutReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_ATOP] = fbCombineConjointAtopU;
    imp->combine_width[PIXMAN_OP_CONJOINT_ATOP_REVERSE] = fbCombineConjointAtopReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_XOR] = fbCombineConjointXorU;

    imp->combine_width[PIXMAN_OP_MULTIPLY] = fbCombineMultiplyU;
    imp->combine_width[PIXMAN_OP_SCREEN] = fbCombineScreenU;
    imp->combine_width[PIXMAN_OP_OVERLAY] = fbCombineOverlayU;
    imp->combine_width[PIXMAN_OP_DARKEN] = fbCombineDarkenU;
    imp->combine_width[PIXMAN_OP_LIGHTEN] = fbCombineLightenU;
    imp->combine_width[PIXMAN_OP_COLOR_DODGE] = fbCombineColorDodgeU;
    imp->combine_width[PIXMAN_OP_COLOR_BURN] = fbCombineColorBurnU;
    imp->combine_width[PIXMAN_OP_HARD_LIGHT] = fbCombineHardLightU;
    imp->combine_width[PIXMAN_OP_SOFT_LIGHT] = fbCombineSoftLightU;
    imp->combine_width[PIXMAN_OP_DIFFERENCE] = fbCombineDifferenceU;
    imp->combine_width[PIXMAN_OP_EXCLUSION] = fbCombineExclusionU;
    imp->combine_width[PIXMAN_OP_SUBTRACT] = fbCombineSubtractU;
    imp->combine_width[PIXMAN_OP_INVERT] = fbCombineInvertU;

    /* Component alpha combiners */
    imp->combine_width_ca[PIXMAN_OP_CLEAR] = fbCombineClearC;
    imp->combine_width_ca[PIXMAN_OP_SRC] = fbCombineSrcC;
    /* dest */
    imp->combine_width_ca[PIXMAN_OP_OVER] = fbCombineOverC;
    imp->combine_width_ca[PIXMAN_OP_OVER_REVERSE] = fbCombineOverReverseC;
    imp->combine_width_ca[PIXMAN_OP_IN] = fbCombineInC;
    imp->combine_width_ca[PIXMAN_OP_IN_REVERSE] = fbCombineInReverseC;
    imp->combine_width_ca[PIXMAN_OP_OUT] = fbCombineOutC;
    imp->combine_width_ca[PIXMAN_OP_OUT_REVERSE] = fbCombineOutReverseC;
    imp->combine_width_ca[PIXMAN_OP_ATOP] = fbCombineAtopC;
    imp->combine_width_ca[PIXMAN_OP_ATOP_REVERSE] = fbCombineAtopReverseC;
    imp->combine_width_ca[PIXMAN_OP_XOR] = fbCombineXorC;
    imp->combine_width_ca[PIXMAN_OP_ADD] = fbCombineAddC;
    imp->combine_width_ca[PIXMAN_OP_SATURATE] = fbCombineSaturateC;

    /* Disjoint CA */
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_CLEAR] = fbCombineClearC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_SRC] = fbCombineSrcC;
    /* dest */
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OVER] = fbCombineDisjointOverC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OVER_REVERSE] = fbCombineSaturateC,
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_IN] = fbCombineDisjointInC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_IN_REVERSE] = fbCombineDisjointInReverseC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OUT] = fbCombineDisjointOutC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OUT_REVERSE] = fbCombineDisjointOutReverseC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_ATOP] = fbCombineDisjointAtopC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_ATOP_REVERSE] = fbCombineDisjointAtopReverseC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_XOR] = fbCombineDisjointXorC;

    /* Conjoint CA */
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_CLEAR] = fbCombineClearC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_SRC] = fbCombineSrcC;
    /* dest */
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OVER] = fbCombineConjointOverC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OVER_REVERSE] = fbCombineConjointOverReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_IN] = fbCombineConjointInC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_IN_REVERSE] = fbCombineConjointInReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OUT] = fbCombineConjointOutC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OUT_REVERSE] = fbCombineConjointOutReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_ATOP] = fbCombineConjointAtopC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_ATOP_REVERSE] = fbCombineConjointAtopReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_XOR] = fbCombineConjointXorC;
}
