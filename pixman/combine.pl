$usage = "Usage: combine.pl { 8 | 16 } < combine.inc";

$#ARGV == 0 or die $usage;

# Get the component size.
$size = int($ARGV[0]);
$size == 8 or $size == 16 or die $usage;

$pixel_size = $size * 4;
$half_pixel_size = $size * 2;

sub mask {
    my $str = shift;
    my $suffix;
    $suffix = "ULL" if $size > 8;

    return "0x" . $str . $suffix;
}

# Generate mask strings.
$nibbles = $size / 4;
$mask = "f" x $nibbles;
$zero_mask = "0" x $nibbles;
$one_half = "8" . "0" x ($nibbles - 1);

print "/* WARNING: This file is generated by combine.pl from combine.inc.\n";
print "   Please edit one of those files rather than this one. */\n";
print "\n";

# Mask and 1/2 value for a single component.
print "#define COMPONENT_SIZE ", $size, "\n";
print "#define MASK ", mask($mask), "\n";
print "#define ONE_HALF ", mask($one_half), "\n";
print "\n";

# Shifts and masks for green, blue, and alpha.
print "#define G_SHIFT ", $size, "\n";
print "#define B_SHIFT ", $size * 2, "\n";
print "#define A_SHIFT ", $size * 3, "\n";
print "#define G_MASK ", mask($mask . $zero_mask), "\n";
print "#define B_MASK ", mask($mask . $zero_mask x 2), "\n";
print "#define A_MASK ", mask($mask . $zero_mask x 3), "\n";
print "\n";

# Special values for dealing with red + blue at the same time.
print "#define RB_MASK ", mask($mask . $zero_mask . $mask), "\n";
print "#define AG_MASK ", mask($mask . $zero_mask . $mask . $zero_mask), "\n";
print "#define RB_ONE_HALF ", mask($one_half . $zero_mask . $one_half), "\n";
print "#define RB_MASK_PLUS_ONE ", mask("1" . $zero_mask x 2 . "1" .  $zero_mask), "\n";
print "\n";

print "#line 1 \"combine.inc\"\n";
while (<STDIN>) {
    # Add 32/64 suffix to combining function types.
    s/\bCombineFuncC\b/CombineFuncC$pixel_size/;
    s/\bCombineFuncU\b/CombineFuncU$pixel_size/;
    s/\bCombineMaskU\b/CombineMaskU$pixel_size/;
    s/\bFbComposeFunctions\b/FbComposeFunctions$pixel_size/;

    # Convert comp*_t values into the appropriate real types.
    s/comp1_t/uint${size}_t/g;
    s/comp2_t/uint${half_pixel_size}_t/g;
    s/comp4_t/uint${pixel_size}_t/g;

    print;
}
